import json
import telebot
from telebot import types
from config import TOKEN, PRODUCTS_PATH
from services.cart_service import CartService
from services.order_service import OrderService

bot = telebot.TeleBot(TOKEN)
cart_service = CartService()
order_service = OrderService()

with open(PRODUCTS_PATH, 'r', encoding='utf-8') as f:
    products_data = json.load(f)

@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üì¶ –ö–∞—Ç–∞–ª–æ–≥', 'üõí –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
    bot.send_message(message.chat.id, f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == 'üì¶ –ö–∞—Ç–∞–ª–æ–≥')
def show_categories(message):
    markup = types.InlineKeyboardMarkup()
    for category in products_data:
        markup.add(types.InlineKeyboardButton(text=category, callback_data=f"category:{category}"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø—Ä–æ–¥—É–∫—Ü—ñ—ó:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('category:'))
def show_products(call):
    category = call.data.split(':')[1]
    markup = types.InlineKeyboardMarkup()
    for product in products_data[category]:
        callback_data = f"add:{product['name']}:{product['price']}"
        markup.add(types.InlineKeyboardButton(text=f"{product['name']} - {product['price']} –≥—Ä–Ω", callback_data=callback_data))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text=f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('add:'))
def add_to_cart(call):
    _, name, price = call.data.split(':')
    cart_service.add_to_cart(call.from_user.id, {"name": name, "price": int(price)})
    bot.answer_callback_query(call.id, f"‚úÖ –î–æ–¥–∞–Ω–æ: {name}")

@bot.message_handler(func=lambda msg: msg.text == 'üõí –ú–æ—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def show_cart(message):
    cart = cart_service.get_cart(message.from_user.id)
    if not cart:
        bot.send_message(message.chat.id, "üõí –í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "üß∫ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
    total = 0
    for item in cart:
        text += f"- {item['name']}: {item['price']} –≥—Ä–Ω\n"
        total += item['price']
    text += f"\nüí∞ –†–∞–∑–æ–º: {total} –≥—Ä–Ω"

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm"),
               types.InlineKeyboardButton("‚ùå –û—á–∏—Å—Ç–∏—Ç–∏", callback_data="clear"))
    bot.send_message(message.chat.id, text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ['confirm', 'clear'])
def handle_cart_action(call):
    user_id = call.from_user.id
    if call.data == 'clear':
        cart_service.clear_cart(user_id)
        bot.answer_callback_query(call.id, "üßπ –ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.")
        bot.edit_message_text("–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ.", call.message.chat.id, call.message.message_id)
    elif call.data == 'confirm':
        cart = cart_service.get_cart(user_id)
        if not cart:
            bot.answer_callback_query(call.id, "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
            return
        order_service.create_order(user_id, call.from_user.username or '', cart)
        cart_service.clear_cart(user_id)
        bot.answer_callback_query(call.id, "üßæ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!")
        bot.edit_message_text("–î—è–∫—É—î–º–æ! –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ üßÅ", call.message.chat.id, call.message.message_id)
